#1- List the number of films per category.


select category_id AS category_id, count(film_id) as film_count
from film_category
group by 1;

-- OR

select film_category.category_id as film_category_id, count(film.film_id) as film_count 
from film
inner join film_category
on film.film_id = film_category.film_id
group by film_category_id;


#2- Retrieve the store ID, city, and country for each store.

select store.store_id as storeid, city.city as city, country.country as country from store
inner join address
on store.address_id = address.address_id
inner join city
on address.city_id = city.city_id
inner join country
on city.country_id = country.country_id;

#3- Calculate the total revenue generated by each store in dollars.

select inventory.store_id as store_id, sum(film.rental_rate) as total_revenue
from film
inner join inventory
on film.film_id = inventory.film_id
inner join rental
on inventory.inventory_id = rental.inventory_id
inner join payment
on rental.rental_id = payment.rental_id
group by store_id;

#4- Determine the average running time of films for each category.

select category.name, avg(length) as lengthh from film
inner join film_category
on film.film_id = film_category.film_id
inner join category
on film_category.category_id = category.category_id
group by category.name;

-- Bonus:

-- 5- Identify the film categories with the longest average running time.

select category.name, round(avg(length), 2) as lengthh from film
inner join film_category
on film.film_id = film_category.film_id
inner join category
on film_category.category_id = category.category_id
group by category.name
order by 2 desc limit 1;

-- 6- Display the top 10 most frequently rented movies in descending order.

select title, count(f.film_id) rental_count from film f
inner join inventory i
on f.film_id = i.film_id
inner join rental r
on i.inventory_id = r.inventory_id
group by title
order by 2 desc limit 10;

-- 7- Determine if "Academy Dinosaur" can be rented from Store 1.
select f.title, s.store_id from film f
inner join inventory i
on f.film_id = i.film_id
inner join store s
on i.store_id = s.store_id
having title = 'Academy Dinosaur' and store_id = 1;

-- 8- Provide a list of all distinct film titles, along with their availability status in the inventory. 
--    Include a column indicating whether each title is 'Available' or 'NOT available.' Note that there 
--    are 42 titles that are not in the inventory, and this information can be obtained using a CASE 
--    statement combined with IFNULL."

select f.title as title, i.film_id as film_id,
CASE
when i.film_id is null then 'not available'
else 'available' end as availability
from film f
left join inventory i
on f.film_id = i.film_id
having availability = 'not available'



